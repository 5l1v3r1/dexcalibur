#!/usr/bin/node --max-old-space-size=8192
// #!/usr/local/bin/node --max-old-space-size=8192

const Dexcalibur = require("./src/Project.js");
const ArgParser = require("./src/ArgUtils.js");
const Process = require("process"); 
const Logger = require("./src/Logger.js")
const PlatformBuilder = require("./src/PlatformBuilder.js");
const Platform = require("./src/Platform.js");
const Configuration = require("./src/Configuration.js");

var projectArgs = {};

var Parser = new ArgParser(projectArgs, [
    { name:"--api", 
        help: "The Android API version to use. It should be one entry of platform_available config option.",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.api = param.value; } },
    { name:"--pull", 
        help: "To pull the APK file of the targeted application from the device",
        hasVal:false, 
        callback:(ctx,param)=>{ ctx.pull = 1; } },
    { name:"--devices", 
        help: "To list connected devices",
        hasVal:false, 
        callback:(ctx,param)=>{ ctx.devices = 1; } },
    { name:"--app", 
        help: "The targeted application name (if already analyzed)",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.app = param.value; } },
    { name:"--port", 
        help: "The web server port number",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.port = param.value; } },
    { name:"--config", 
        help: "The path to a custom config file. Default : ./config.js",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.cfg = param.value; } },
    { name:["--help","-h"], 
        help: "This menu",    
        hasVal:false, 
        callback:(ctx,param)=>{ ctx.help = 1; } },
    { name:"--no-frida", 
        help: "To disable Frida part. It allows to run Dexcalibur to analyze purpose even if Frida is not installed",
        hasVal:false, 
        callback:(ctx,param)=>{ ctx.nofrida = 1; } },
    { name:"--buildClass", 
        help: "To generate Frida script with a Java.use for each class contained into the specified package (see docs)",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.buildClass = param.value; } },
    { name:"--buildOut", 
        help: "The output directory",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.buildOut = param.value; } },
    { name:"--buildApi", 
        help: "To build the representation of the specified Android API",
        hasVal:true, 
        callback:(ctx,param)=>{ ctx.buildApi = param.value; } }
]);

Parser.parse(Process.argv);

if(projectArgs.help != null){
    console.log(Parser.getHelp());
    Process.exit();
}

if(projectArgs.buildApi != null){
    let name = projectArgs.buildApi.split(":");
    let target = new Platform({
        name: name[0],
        version: name[1]
    });
    let cfg = new Configuration();
    cfg.import(require(projectArgs.config!=null?projectArgs.config:"./config.js"));

    let builder = new PlatformBuilder(cfg);
    builder.build(target);
}


if(projectArgs.api == null){
    projectArgs.api = "android:7.0.0";
}

if(projectArgs.app == null)
    Logger
        .error("The parameter '--app' is not specified, please provide the name of the package name of the application.")
        .exit();
    
    
var Project = null ;
if(projectArgs.config != null){
    Project = new Dexcalibur(projectArgs.app, projectArgs.config, projectArgs.nofrida);
}else{
    Project = new Dexcalibur(projectArgs.app, null, projectArgs.nofrida);
}

if(projectArgs.pull != null){
    Project.pull();
}


Project.useAPI(projectArgs.api).fullscan();

if(projectArgs.port != null){
    Project.web.start(projectArgs.port);
}

if(projectArgs.buildClass != null && projectArgs.buildOut != null){
    var res = Project.find.class("name:"+projectArgs.buildClass);
    Project.fridaBuilder.class(res).save(projectArgs.buildOut);
}


